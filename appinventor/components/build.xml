<?xml version="1.0"?>

<!-- ======================================================================
     Copyright 2011 Google Inc.  All Rights Reserved.
     Copyright 2012-2017 Massachusetts Institute of Technology, All rights reserved.

     App Inventor component libraries
     ====================================================================== -->

<project name="components" default="all">
  <description>
    App Inventor component libraries
  </description>

  <target name="all"
          depends="CommonConstants,AndroidRuntime">
  </target>

  <target name="tests"
          depends="CommonTests,AndroidRuntimeTests">
  </target>

  <!-- =====================================================================
       Import common directory, task, and target definitions.
       ===================================================================== -->
  <import file="../build-common.xml" />

  <!-- =====================================================================
       Define base package path for internal components.
       ===================================================================== -->
  <property name="components.pkg" value="com/google/appinventor/components" />
  <property name="zxing.pkg" value="com/google/zxing" />

  <!-- =====================================================================
       Define external components properties.
       ===================================================================== -->
  <property name="ExternalComponentGenerator-class.dir" location="${class.dir}/ExternalComponentGenerator" />
  <property name="ExternalComponent.dir" location="${local.build.dir}/externalComponents" />
  <property name="ExternalComponent-class.dir" location="${local.build.dir}/externalComponents-class" />
  <property name="Extensions.dir" location="${local.build.dir}/extensions" />
  <!-- Can be used by extension authors to use the old-style AIX package layout -->
  <property name="extensions.packagefqcn" value="false" />

  <!-- =====================================================================
       CommonConstants: library of constants used across App Inventor
       ===================================================================== -->
  <target name="CommonConstants"
          description="Generate library of constants used across App Inventor"
          depends="init">
    <property name="CommonConstants-class.dir" location="${class.dir}/CommonConstants" />
    <mkdir dir="${CommonConstants-class.dir}" />

    <ai.javac destdir="${CommonConstants-class.dir}">
      <include name="${components.pkg}/common/*.java" />
      <exclude name="${components.pkg}/common/HtmlEntities.java" />
    </ai.javac>

    <jar destfile="${public.build.dir}/CommonConstants.jar">
      <fileset dir="${CommonConstants-class.dir}"/>
    </jar>

    <jar destfile="${public.build.dir}/CommonConstants-gwt.jar">
      <fileset dir="${CommonConstants-class.dir}"/>
      <!-- Source files needed for GWT compilation: -->
      <fileset dir="${src.dir}">
        <include name="${components.pkg}/common/*.java" />
        <exclude name="${components.pkg}/common/HtmlEntities.java" />
        <include name="${components.pkg}/CommonConstants.gwt.xml" />
      </fileset>
    </jar>
  </target>

  <!-- =====================================================================
       HtmlEntities: library containing utility class for working with
           HTML entities.
       ===================================================================== -->
  <target name="HtmlEntities"
          description="Generate library containing utility class for working with HTML entities"
          depends="init">
    <property name="HtmlEntities-class.dir" location="${class.dir}/HtmlEntities" />
    <mkdir dir="${HtmlEntities-class.dir}" />

    <ai.javac destdir="${HtmlEntities-class.dir}">
      <include name="${components.pkg}/common/HtmlEntities.java" />
    </ai.javac>

    <jar destfile="${local.build.dir}/HtmlEntities.jar">
      <fileset dir="${HtmlEntities-class.dir}"/>
    </jar>
  </target>

  <!-- =====================================================================
       CommonTests: build and run the common tests and generate the output results
       ===================================================================== -->

  <path id="libsForCommonTests.path">
    <pathelement location="${local.build.dir}/HtmlEntities.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
  </path>

  <path id="CommonTests.path">
    <path refid="libsForCommonTests.path"/>
    <pathelement location="${local.build.dir}/CommonTests.jar" />
  </path>

  <target name="CommonTests"
          depends="HtmlEntities"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="CommonTests"
                aij-dir="${components.pkg}/common" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       CopyComponentLibraries
       ===================================================================== -->
  <property name="public.deps.dir" location="${public.build.dir}/deps" />
  <target name="CopyComponentLibraries"
          depends="Barcode"
          description="Copies libraries needed for components into the public build directory">
    <property name="support.dir" location="${lib.dir}/android/support" />
    <property name="support.version" value="28.0.0" />
    <copy toFile="${public.deps.dir}/osmdroid.aar" file="${lib.dir}/osmdroid/osmdroid-5.6.6.aar" />
    <copy toFile="${public.deps.dir}/osmdroid.jar" file="${lib.dir}/osmdroid/osmdroid-5.6.6.jar" />
    <copy toFile="${public.deps.dir}/webrtc.jar"
          file="${lib.dir}/webrtc/webrtc.jar" />
    <copy toFile="${public.deps.dir}/armeabi-v7a/libjingle_peerconnection_so.so"
          file="${lib.dir}/webrtc/armeabi-v7a/libjingle_peerconnection_so.so" />
    <copy toFile="${public.deps.dir}/arm64-v8a/libjingle_peerconnection_so.so"
          file="${lib.dir}/webrtc/arm64-v8a/libjingle_peerconnection_so.so" />
    <copy toFile="${public.deps.dir}/x86_64/libjingle_peerconnection_so.so"
          file="${lib.dir}/webrtc/x86_64/libjingle_peerconnection_so.so" />
    <copy toFile="${public.deps.dir}/jts.jar" file="${lib.dir}/jts/jts-core-1.15.0-20170823.040415-301.jar" />
    <copy toFile="${public.deps.dir}/androidsvg.jar" file="${lib.dir}/androidsvg/androidsvg-d4ec6d8.jar" />
    <copy toFile="${public.deps.dir}/kawa.jar" file="${lib.dir}/kawa/kawa-1.11-modified.jar" />
    <copy toFile="${public.deps.dir}/acra-4.4.0.jar" file="${lib.dir}/acra/acra-4.4.0.jar" />
    <copy toFile="${public.deps.dir}/twitter4j.jar" file="${lib.dir}/twitter/twitter4j-core-3.0.5.jar" />
    <copy toFile="${public.deps.dir}/twitter4jmedia.jar" file="${lib.dir}/twitter/twitter4j-media-support-3.0.5.jar" />
    <copy toFile="${public.deps.dir}/httpmime.jar" file="${lib.dir}/apache-http/httpmime-4.3.4.jar" />
    <copy toFile="${public.deps.dir}/fusiontables.jar" file="${lib.dir}/fusiontables/fusiontables.jar" />
    <copy toFile="${public.deps.dir}/firebase.jar" file="${lib.dir}/firebase/firebase-client-android-2.5.0.jar" />
    <copy toFile="${public.deps.dir}/google-api-client-beta.jar" file="${lib.dir}/oauth/google-api-client-1.10.3-beta.jar" />
    <copy toFile="${public.deps.dir}/google-http-client-beta.jar" file="${lib.dir}/oauth/google-http-client-1.10.3-beta.jar" />
    <copy toFile="${public.deps.dir}/google-api-client-android2-beta.jar" file="${lib.dir}/oauth/google-api-client-android2-1.10.3-beta.jar" />
    <copy toFile="${public.deps.dir}/google-http-client-android2-beta.jar" file="${lib.dir}/oauth/google-http-client-android2-1.10.3-beta.jar" />
    <copy toFile="${public.deps.dir}/google-http-client-android3-beta.jar" file="${lib.dir}/oauth/google-http-client-android3-1.10.3-beta.jar" />
    <copy toFile="${public.deps.dir}/gson-2.1.jar" file="${lib.dir}/gson/gson-2.1.jar" />
    <copy toFile="${public.deps.dir}/json.jar" file="${lib.dir}/json/json-android.jar" />
    <copy toFile="${public.deps.dir}/google-oauth-client-beta.jar" file="${lib.dir}/oauth/google-oauth-client-1.10.1-beta.jar" />
    <copy toFile="${public.deps.dir}/jedis.jar" file="${lib.dir}/jedis/jedis-3.0.0-SNAPSHOT-jar-with-dependencies.jar" />
    <copy toFile="${public.deps.dir}/commons-pool.jar" file="${lib.dir}/commons-pool/commons-pool2-2.0.jar" />
    <copy toFile="${public.deps.dir}/guava-14.0.1.jar" file="${lib.dir}/guava/guava-14.0.1.jar" />
    <copy toFile="${public.deps.dir}/core.jar" file="${lib.dir}/QRGenerator/core.jar" />
    <!-- BEGIN Android Support Libraries -->
    <copy todir="${public.deps.dir}/">
      <fileset dir="${support.dir}/" includes="*.aar,*.jar" excludes="testing-support-R-classes.jar" />
      <mapper type="regexp" from="([-a-z0-9]*)-[0-9\.]*\.(aar|jar)$$" to="\1.\2" />
    </copy>
    <copy todir="${public.deps.dir}/">
      <fileset dir="${support.dir}/" includes="*.txt" />
    </copy>
    <copy toFile="${public.deps.dir}/http-legacy.jar" file="${lib.dir}/android/legacy/org.apache.http.legacy.jar" />
    <!-- END Android Support Libraries -->
    <copy toFile="${public.deps.dir}/android.jar" file="${lib.dir}/android/android-28/android.jar" />
    <copy toFile="${public.deps.dir}/dx.jar" file="${lib.dir}/android/tools/dx.jar" />
    <copy toFile="${public.deps.dir}/apksigner.jar" file="${lib.dir}/android/tools/apksigner.jar" />
    <copy toFile="${public.deps.dir}/CommonVersion.jar" file="${build.dir}/common/CommonVersion.jar" />

    <!-- Add extension libraries here -->
    <!-- Example: <copy toFile="${public.deps.dir}/my-dependency.jar" file="${lib.dir}/my-dependency/my-dependency-1.0.0.jar" /> -->
    <!-- Remember to include my-dependency.jar in the @UsesLibraries annotation in the extension -->
       <copy toFile="${public.deps.dir}/youtube.jar" file="${lib.dir}/kangris/youtube.jar" />
       <copy toFile="${public.deps.dir}/unity-ads.jar" file="${lib.dir}/kangris/unity-ads-3.4.0.jar" />
       <copy toFile="${public.deps.dir}/unity-ads.aar" file="${lib.dir}/kangris/unity-ads-3.4.0.aar" />
       <copy toFile="${public.deps.dir}/ytextract.jar" file="${lib.dir}/kangris/ytextract.jar" />
       <copy toFile="${public.deps.dir}/giraffeplayer2.jar" file="${lib.dir}/kangris/giraffeplayer2-0.1.25.jar" />
       <copy toFile="${public.deps.dir}/giraffeplayer2.aar" file="${lib.dir}/kangris/giraffeplayer2-0.1.25.aar" />
       <copy toFile="${public.deps.dir}/spruce-android.jar" file="${lib.dir}/kangris/spruce-android.jar" />
       <copy toFile="${public.deps.dir}/spruce-android.aar" file="${lib.dir}/kangris/spruce-android.aar" />
       <copy toFile="${public.deps.dir}/audience-network.jar" file="${lib.dir}/kangris/audience-network-sdk-5.6.1.jar" />
       <copy toFile="${public.deps.dir}/audience-network.aar" file="${lib.dir}/kangris/audience-network-sdk-5.6.1.aar" />
       <copy toFile="${public.deps.dir}/autodetectotpandroid.jar" file="${lib.dir}/kangris/autodetectotpandroid-1.0.0.jar" />
       <copy toFile="${public.deps.dir}/autodetectotpandroid.aar" file="${lib.dir}/kangris/autodetectotpandroid-1.0.0.aar" />
       <copy toFile="${public.deps.dir}/rootbeerlib.jar" file="${lib.dir}/kangris/rootbeerlib.jar" />
       <copy toFile="${public.deps.dir}/rootbeerlib.aar" file="${lib.dir}/kangris/rootbeerlib.aar" />
       <copy toFile="${public.deps.dir}/tooltip.jar" file="${lib.dir}/kangris/tooltip-0.2.0.jar" />
       <copy toFile="${public.deps.dir}/tooltip.aar" file="${lib.dir}/kangris/tooltip-0.2.0.aar" />
       <copy toFile="${public.deps.dir}/youtubejextractor.jar" file="${lib.dir}/kangris/youtubejextractor.jar" />
       <copy toFile="${public.deps.dir}/youtubejextractor.aar" file="${lib.dir}/kangris/youtubejextractor.aar" />
       <copy toFile="${public.deps.dir}/RoundCornerProgressBar.jar" file="${lib.dir}/kangris/RoundCornerProgressBar-2.0.3.jar" />
       <copy toFile="${public.deps.dir}/RoundCornerProgressBar.aar" file="${lib.dir}/kangris/RoundCornerProgressBar-2.0.3.aar" />
       <copy toFile="${public.deps.dir}/google-direction.jar" file="${lib.dir}/kangris/google-direction-library-1.2.0.jar" />
       <copy toFile="${public.deps.dir}/google-direction.aar" file="${lib.dir}/kangris/google-direction-library-1.2.0.aar" />
       <copy toFile="${public.deps.dir}/keyboardview.jar" file="${lib.dir}/kangris/keyboardview.jar" />
       <copy toFile="${public.deps.dir}/keyboardview.aar" file="${lib.dir}/kangris/keyboardview.aar" />
       <copy toFile="${public.deps.dir}/kbv.jar" file="${lib.dir}/kangris/kbv.jar" />
       <copy toFile="${public.deps.dir}/equalizers.jar" file="${lib.dir}/kangris/equalizers.jar" />
       <copy toFile="${public.deps.dir}/equalizers.aar" file="${lib.dir}/kangris/equalizers.aar" />
       <copy toFile="${public.deps.dir}/playercontrolview.jar" file="${lib.dir}/kangris/playercontrolview-1.0.1.jar" />
       <copy toFile="${public.deps.dir}/playercontrolview.aar" file="${lib.dir}/kangris/playercontrolview-1.0.1.aar" />
       <copy toFile="${public.deps.dir}/exoplayer-core.jar" file="${lib.dir}/kangris/exoplayer-core-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-core.aar" file="${lib.dir}/kangris/exoplayer-core-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/exoplayer-dash.jar" file="${lib.dir}/kangris/exoplayer-dash-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-dash.aar" file="${lib.dir}/kangris/exoplayer-dash-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/exoplayer-hls.jar" file="${lib.dir}/kangris/exoplayer-hls-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-hls.aar" file="${lib.dir}/kangris/exoplayer-hls-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/exoplayer-smoothstreaming.jar" file="${lib.dir}/kangris/exoplayer-smoothstreaming-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-smoothstreaming.aar" file="${lib.dir}/kangris/exoplayer-smoothstreaming-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/exoplayer-ui.jar" file="${lib.dir}/kangris/exoplayer-ui-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-ui.aar" file="${lib.dir}/kangris/exoplayer-ui-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/exoplayer.jar" file="${lib.dir}/kangris/exoplayer-2.9.6.jar" />
       <copy toFile="${public.deps.dir}/exoplayer.aar" file="${lib.dir}/kangris/exoplayer-2.9.6.aar" />
       <copy toFile="${public.deps.dir}/startapp.jar" file="${lib.dir}/kangris/startapp.jar" />
       <copy toFile="${public.deps.dir}/startapp.aar" file="${lib.dir}/kangris/startapp.aar" />
       <copy toFile="${public.deps.dir}/HomeLockerLib.jar" file="${lib.dir}/kangris/HomeLockerLib.jar" />
       <copy toFile="${public.deps.dir}/selectedtextview.jar" file="${lib.dir}/kangris/selectedtextview.jar" />
       <copy toFile="${public.deps.dir}/audioplayerview.jar" file="${lib.dir}/kangris/audioplayerview-release.jar" />
       <copy toFile="${public.deps.dir}/audioplayerview.aar" file="${lib.dir}/kangris/audioplayerview-release.aar" />
       <copy toFile="${public.deps.dir}/joystick.jar" file="${lib.dir}/kangris/joystick.jar" />
       <copy toFile="${public.deps.dir}/joystick.aar" file="${lib.dir}/kangris/joystick.aar" />
       <copy toFile="${public.deps.dir}/ezcam.jar" file="${lib.dir}/kangris/ezcam-2.3.jar" />
       <copy toFile="${public.deps.dir}/ezcam.jar" file="${lib.dir}/kangris/ezcam-2.3.aar" />
       <copy toFile="${public.deps.dir}/joystickview-1.0.2.jar" file="${lib.dir}/kangris/joystickview-1.0.2.jar" />
       <copy toFile="${public.deps.dir}/joystickview-1.0.2.aar" file="${lib.dir}/kangris/joystickview-1.0.2.aar" />
       <copy toFile="${public.deps.dir}/truenet.jar" file="${lib.dir}/kangris/truenet-2.0.0.jar" />
       <copy toFile="${public.deps.dir}/truenet.aar" file="${lib.dir}/kangris/truenet-2.0.0.aar" />
       <copy toFile="${public.deps.dir}/pinlockview.jar" file="${lib.dir}/kangris/pinlockview-2.1.0.jar" />
       <copy toFile="${public.deps.dir}/pinlockview.aar" file="${lib.dir}/kangris/pinlockview-2.1.0.aar" />
       <copy toFile="${public.deps.dir}/recyclerview-v7.jar" file="${lib.dir}/kangris/recyclerview-v7-28.0.0.jar" />
       <copy toFile="${public.deps.dir}/google-play-services.jar" file="${lib.dir}/kangris/google-play-services.jar" />
       <copy toFile="${public.deps.dir}/places.jar" file="${lib.dir}/kangris/places-2.2.0.jar" />
       <copy toFile="${public.deps.dir}/placesearch.jar" file="${lib.dir}/kangris/placesearch-1.0.1.jar" />
       <copy toFile="${public.deps.dir}/Coronavirus.jar" file="${lib.dir}/kangris/Coronavirus.jar" />
       <copy toFile="${public.deps.dir}/ShapedImageView.jar" file="${lib.dir}/kangris/ShapedImageView.jar" />
       <copy toFile="${public.deps.dir}/ShapedImageView.aar" file="${lib.dir}/kangris/ShapedImageView.aar" />
       <copy toFile="${public.deps.dir}/GuessPrivateKey.jar" file="${lib.dir}/kangris/GuessPrivateKey.jar" />
       
       <copy toFile="${public.deps.dir}/play-services-ads-lite.jar" file="${lib.dir}/kangris/play-services-ads-lite-17.0.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-ads-lite.aar" file="${lib.dir}/kangris/play-services-ads-lite-17.0.0.aar" />
       <copy toFile="${public.deps.dir}/play-services.aar" file="${lib.dir}/kangris/play-services-12.0.1.aar" />
       <copy toFile="${public.deps.dir}/play-services-ads.jar" file="${lib.dir}/kangris/play-services-ads-17.0.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-ads.aar" file="${lib.dir}/kangris/play-services-ads-17.0.0.aar" />
       <copy toFile="${public.deps.dir}/play-services-ads-base.jar" file="${lib.dir}/kangris/play-services-ads-base-17.0.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-ads-base.aar" file="${lib.dir}/kangris/play-services-ads-base-17.0.0.aar" />
       
       <copy toFile="${public.deps.dir}/customtabs.jar" file="${lib.dir}/kangris/customtabs-26.1.0.jar" />
       <copy toFile="${public.deps.dir}/customtabs.aar" file="${lib.dir}/kangris/customtabs-26.1.0.aar" />
       
       <copy toFile="${public.deps.dir}/play-services-ads-identifier.jar" file="${lib.dir}/kangris/play-services-ads-identifier-16.0.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-ads-identifier.aar" file="${lib.dir}/kangris/play-services-ads-identifier-16.0.0.aar" />
       <copy toFile="${public.deps.dir}/play-services-basement.jar" file="${lib.dir}/kangris/play-services-basement-16.0.1.jar" />
       <copy toFile="${public.deps.dir}/play-services-basement.aar" file="${lib.dir}/kangris/play-services-basement-16.0.1.aar" />
       <copy toFile="${public.deps.dir}/play-services-gass.jar" file="${lib.dir}/kangris/play-services-gass-17.0.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-gass.aar" file="${lib.dir}/kangris/play-services-gass-17.0.0.aar" />
       <!--copy toFile="${public.deps.dir}/play-services-measurement.jar" file="${lib.dir}/kangris/play-services-measurement-17.3.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-measurement.aar" file="${lib.dir}/kangris/play-services-measurement-17.3.0.aar" /-->
       <copy toFile="${public.deps.dir}/play-services-measurement-base.jar" file="${lib.dir}/kangris/play-services-measurement-base-16.0.3.jar" />
       <copy toFile="${public.deps.dir}/play-services-measurement-base.aar" file="${lib.dir}/kangris/play-services-measurement-base-16.0.3.aar" />
       <copy toFile="${public.deps.dir}/play-services-measurement-sdk-api.jar" file="${lib.dir}/kangris/play-services-measurement-sdk-api-16.0.2.jar" />
       <copy toFile="${public.deps.dir}/play-services-measurement-sdk-api.aar" file="${lib.dir}/kangris/play-services-measurement-sdk-api-16.0.2.aar" />
       
       <copy toFile="${public.deps.dir}/play-services-base.jar" file="${lib.dir}/kangris/play-services-base-11.6.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-base.aar" file="${lib.dir}/kangris/play-services-base-11.6.0.aar" />
       <copy toFile="${public.deps.dir}/play-services-maps.jar" file="${lib.dir}/kangris/play-services-maps-11.6.0.jar" />
       <copy toFile="${public.deps.dir}/play-services-maps.aar" file="${lib.dir}/kangris/play-services-maps-11.6.0.aar" />
       <copy toFile="${public.deps.dir}/AdmobNative.jar" file="${lib.dir}/kangris/AdmobNative.jar" />
       <copy toFile="${public.deps.dir}/AdmobNative.aar" file="${lib.dir}/kangris/AdmobNative.aar" />
       <copy toFile="${public.deps.dir}/android-maps-utils.jar" file="${lib.dir}/kangris/android-maps-utils-1.0.1.jar" />
       <copy toFile="${public.deps.dir}/converter-gson.jar" file="${lib.dir}/kangris/converter-gson-2.7.2.jar" />
       <copy toFile="${public.deps.dir}/logging-interceptor.jar" file="${lib.dir}/kangris/logging-interceptor-4.4.1.jar" />
       <copy toFile="${public.deps.dir}/okhttp.jar" file="${lib.dir}/kangris/okhttp-4.4.1.jar" />
       <copy toFile="${public.deps.dir}/retrofit.jar" file="${lib.dir}/kangris/retrofit-2.7.2.jar" />
       <copy toFile="${public.deps.dir}/drawroutemap.jar" file="${lib.dir}/kangris/drawroutemap.jar" />
       <copy toFile="${public.deps.dir}/drawroutemap.aar" file="${lib.dir}/kangris/drawroutemap.aar" />
       <copy toFile="${public.deps.dir}/hellocharts.jar" file="${lib.dir}/kangris/hellocharts-library-1.5.8.jar" />
       <copy toFile="${public.deps.dir}/usbserial.jar" file="${lib.dir}/kangris/usbserial.jar" />
       <copy toFile="${public.deps.dir}/fullscreenvideoview.jar" file="${lib.dir}/kangris/fullscreenvideoview.jar" />
       <copy toFile="${public.deps.dir}/fullscreenvideoview.aar" file="${lib.dir}/kangris/fullscreenvideoview.aar" />
       <copy toFile="${public.deps.dir}/mathview.jar" file="${lib.dir}/kangris/mathview.jar" />
       <copy toFile="${public.deps.dir}/chunk-templates.jar" file="${lib.dir}/kangris/chunk-templates-3.0.1.jar" />
       <copy toFile="${public.deps.dir}/mathview.aar" file="${lib.dir}/kangris/mathview.aar" />
       <copy toFile="${public.deps.dir}/spinningwheel.jar" file="${lib.dir}/kangris/spinningwheel.jar" />
       <copy toFile="${public.deps.dir}/spinningwheel.aar" file="${lib.dir}/kangris/spinningwheel.aar" />
       <copy toFile="${public.deps.dir}/luckywheelview.jar" file="${lib.dir}/kangris/luckywheelview.jar" />
       <copy toFile="${public.deps.dir}/luckywheelview.aar" file="${lib.dir}/kangris/luckywheelview.aar" />
       <copy toFile="${public.deps.dir}/androidparallax.jar" file="${lib.dir}/kangris/androidparallax.jar" />
       <copy toFile="${public.deps.dir}/androidparallax.aar" file="${lib.dir}/kangris/androidparallax.aar" />
       <copy toFile="${public.deps.dir}/cloudinary-android.jar" file="${lib.dir}/kangris/cloudinary-android-1.12.0.jar" />
       <copy toFile="${public.deps.dir}/cloudinary-core.jar" file="${lib.dir}/kangris/cloudinary-core-1.22.1.jar" />
       <copy toFile="${public.deps.dir}/escpos-coffee.jar" file="${lib.dir}/kangris/escpos-coffee-4.0.1.jar" />
       <copy toFile="${public.deps.dir}/statusbarutil.jar" file="${lib.dir}/kangris/statusbarutil.jar" />
       <copy toFile="${public.deps.dir}/statusbarutil.aar" file="${lib.dir}/kangris/statusbarutil.aar" />
       <copy toFile="${public.deps.dir}/immersiveui.jar" file="${lib.dir}/kangris/immersiveui.jar" />
       <copy toFile="${public.deps.dir}/immersiveui.aar" file="${lib.dir}/kangris/immersiveui.aar" />
       <copy toFile="${public.deps.dir}/biometriclibrary.jar" file="${lib.dir}/kangris/biometriclibrary-release.jar" />
       <copy toFile="${public.deps.dir}/biometriclibrary.aar" file="${lib.dir}/kangris/biometriclibrary-release.aar" />
       <copy toFile="${public.deps.dir}/coronaoutbreak.jar" file="${lib.dir}/kangris/coronaoutbreak-release.jar" />
       <copy toFile="${public.deps.dir}/coronaoutbreak.aar" file="${lib.dir}/kangris/coronaoutbreak-release.aar" />
       <copy toFile="${public.deps.dir}/imageeditorlib.jar" file="${lib.dir}/kangris/imageeditorlib-release.jar" />
       <copy toFile="${public.deps.dir}/imageeditorlib.aar" file="${lib.dir}/kangris/imageeditorlib-release.aar" />
       <copy toFile="${public.deps.dir}/lock9view.jar" file="${lib.dir}/kangris/lock9view-release.jar" />
       <copy toFile="${public.deps.dir}/lock9view.aar" file="${lib.dir}/kangris/lock9view-release.aar" />
       <copy toFile="${public.deps.dir}/util.jar" file="${lib.dir}/kangris/util-release.jar" />
       <copy toFile="${public.deps.dir}/util.aar" file="${lib.dir}/kangris/util-release.aar" />
       <copy toFile="${public.deps.dir}/design.jar" file="${lib.dir}/android/support/design-28.0.0.jar" />
       <copy toFile="${public.deps.dir}/physicaloid.jar" file="${lib.dir}/kangris/physicaloid-library.jar" />
       <copy toFile="${public.deps.dir}/filepicker.jar" file="${lib.dir}/kangris/filepicker-0.0.1.jar" />
       <copy toFile="${public.deps.dir}/datatable.jar" file="${lib.dir}/kangris/datatable.jar" />
       <copy toFile="${public.deps.dir}/moneytextview.jar" file="${lib.dir}/kangris/moneytextview.jar" />
       <copy toFile="${public.deps.dir}/univocity-parsers.jar" file="${lib.dir}/kangris/univocity-parsers-2.8.4.jar" />
       
       <copy toFile="${public.deps.dir}/exoplayer-2.7.0.jar" file="${lib.dir}/kangris/exoplayer-2.7.0.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-core-2.7.0.jar" file="${lib.dir}/kangris/exoplayer-core-2.7.0.jar" />
       <copy toFile="${public.deps.dir}/exoplayer-hls-2.7.0.jar" file="${lib.dir}/kangris/exoplayer-hls-2.7.0.jar" />
       <copy toFile="${public.deps.dir}/extension-rtmp-2.7.0.jar" file="${lib.dir}/kangris/extension-rtmp-2.7.0.jar" />
       <copy toFile="${public.deps.dir}/smp.jar" file="${lib.dir}/kangris/smp.jar" />
       <copy toFile="${public.deps.dir}/magicplayer.jar" file="${lib.dir}/kangris/magicplayer.jar" />
       
       <copy toFile="${public.deps.dir}/glide.jar" file="${lib.dir}/kangris/glide.jar" />
       <copy toFile="${public.deps.dir}/cardviewx.jar" file="${lib.dir}/kangris/cardviewx.jar" />
       <copy toFile="${public.deps.dir}/cardview-v7.jar" file="${lib.dir}/kangris/cardview-v7.jar" />
       <!--forparallex-->
       <copy toFile="${public.deps.dir}/animationparallex.jar" file="${lib.dir}/kangris/library-2.4.0.jar" />
       <!-- CoverMusic-->
       <copy toFile="${public.deps.dir}/cm.jar" file="${lib.dir}/kangris/cm.jar" />
       <copy toFile="${public.deps.dir}/cm.aar" file="${lib.dir}/kangris/cm.aar" />
       
       <copy toFile="${public.deps.dir}/shadow.jar" file="${lib.dir}/kangris/shadow.jar" />
       <copy toFile="${public.deps.dir}/shadow.aar" file="${lib.dir}/kangris/shadow.aar" />
       <!--Selenium-->
       <!--copy toFile="${public.deps.dir}/selenium.jar" file="${lib.dir}/kangris/selenium-java-3.141.59.jar" /-->
       <copy toFile="${public.deps.dir}/selenium.jar" file="${lib.dir}/kangris/client-combined-3.141.59.jar" />
       
       <copy toFile="${public.deps.dir}/discountlabel.jar" file="${lib.dir}/kangris/slanted-textview-1.2.jar" />
       <copy toFile="${public.deps.dir}/discountlabel.aar" file="${lib.dir}/kangris/slanted-textview-1.2.aar" />
       
  </target>

  <path id="AndroidRuntime.path">
    <fileset dir="${public.deps.dir}">
      <include name="*.jar" />
      <exclude name="android.jar" /> <!-- Needs to be excluded for testing classpath consistency -->
    </fileset>
    <pathelement location="${local.build.dir}/HtmlEntities.jar" />
    <pathelement location="${public.build.dir}/CommonConstants.jar" />
  </path>

  <target name="AndroidRuntime.uptodate">
    <uptodate property="AndroidRuntime.uptodate" targetfile="${public.build.dir}/AndroidRuntime.jar">
      <srcfiles dir="${src.dir}" includes="**/*.java" />
      <srcfiles dir="${public.deps.dir}" includes="*" />
    </uptodate>
  </target>

  <!-- =====================================================================
       AndroidRuntime: library providing runtime support for components
       ===================================================================== -->
  <property name="AndroidRuntime-class.dir" location="${class.dir}/AndroidRuntime" />
  <target name="AndroidRuntime"
          description="Generate runtime library implementing components"
          unless="AndroidRuntime.uptodate"
          depends="common_CommonVersion,HtmlEntities,CopyComponentLibraries,AnnotationProcessors,AndroidRuntime.uptodate">
    <mkdir dir="${AndroidRuntime-class.dir}" />

    <!-- We need to delete all the classes before running javac below. Otherwise, javac will only
    process the Java files whose classes are not up-to-date and we'll end up with only a subset
    of the results. For example, if only Label.java was modified, our annotation processor code
    will only be executed for Label.java and we'll only have results for Label.java. -->
    <delete>
      <fileset dir="${AndroidRuntime-class.dir}">
        <include name="**/*"/>
      </fileset>
    </delete>
    <mkdir dir="${AndroidRuntime-class.dir}" />

    <ai.javac destdir="${AndroidRuntime-class.dir}">
      <include name="**/*.java" /> <!-- include all java files -->
      <exclude name="${zxing.pkg}/**/*.java" /> <!-- exclude zxing package -->
      <exclude name="${components.pkg}/scripts/**/*.java" /> <!-- exclude components/script package -->
      <exclude name="${components.pkg}/common/**/*.java" /> <!-- exclude components/common package -->
      <classpath>
        <path refid="AndroidRuntime.path" />
        <pathelement location="${local.build.dir}/AnnotationProcessors.jar" />
        <pathelement location="${public.deps.dir}/android.jar" />
      </classpath>
    </ai.javac>

    <jar basedir="${AndroidRuntime-class.dir}"
         destfile="${public.build.dir}/AndroidRuntime.jar">
      <zipfileset src="${local.build.dir}/HtmlEntities.jar"/>
      <zipfileset src="${public.build.dir}/CommonConstants.jar"/>
      <zipfileset src="${build.dir}/common/CommonVersion.jar" />
      <exclude name="simple_components.json"/>
      <exclude name="simple_components_build_info.json"/>
      <exclude name="simple_components.txt"/>
      <exclude name="component-doc.html"/>
      <exclude name="ComponentsTranslation.java"/>
      <exclude name="AutogeneratedOdeMessages.java"/>
    </jar>

    <!-- Move AnnotationProcessor products into place -->
    <copy todir="${public.build.dir}">
      <fileset dir="${AndroidRuntime-class.dir}">
        <include name="simple_components.txt" />
        <include name="simple_components.json" />
        <include name="simple_components_build_info.json" />
        <include name="component-doc.html" />
      </fileset>
    </copy>
    <mkdir dir="${public.build.dir}/ComponentTranslation/src/com/google/appinventor/client"/>
    <copy todir="${public.build.dir}/ComponentTranslation/src/com/google/appinventor/client">
      <fileset dir="${AndroidRuntime-class.dir}">
        <include name="*.java"/>
      </fileset>
    </copy>
    <copy todir="${appinventor.dir}/docs/markdown/reference/components/">
      <fileset dir="${AndroidRuntime-class.dir}">
        <include name="*.md" />
        <exclude name="internal.md" />
      </fileset>
    </copy>
  </target>

  <!-- =====================================================================
       AndroidRuntimeTests: build and run the AndroidRuntime tests and generate the output results
       ===================================================================== -->

  <path id="libsForAndroidRuntimeTests.path">
    <pathelement location="${public.build.dir}/AndroidRuntime.jar" />
    <pathelement location="${build.dir}/common/CommonTestUtils.jar" />
    <path refid="AndroidRuntime.path" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
    <pathelement location="${lib.dir}/junit4/tl4j-junit4-1.1.3.jar" />
    <pathelement location="${lib.dir}/bouncycastle/bcprov-jdk15on-149.jar" />
    <pathelement location="${lib.dir}/powermock/cglib-nodep-2.2.jar" />
    <pathelement location="${lib.dir}/powermock/easymock-3.0.jar" />
    <pathelement location="${lib.dir}/powermock/javassist-3.18.0-GA.jar" />
    <pathelement location="${lib.dir}/powermock/objenesis-1.2.jar" />
    <pathelement location="${lib.dir}/powermock/powermock-easymock-1.4.10-full.jar" />
    <pathelement location="${lib.dir}/android/support/testing-support-R-classes.jar" />
    <!-- android.jar must go last on the classpath list
         so that its junit (or other) stubs don't override the real ones -->
    <pathelement location="${lib.dir}/robolectric/robolectric-3.3.2-all-deps.jar" />
    <pathelement location="${lib.dir}/android/android-28/android.jar" />
  </path>

  <path id="AndroidRuntimeTests.path">
    <path refid="libsForAndroidRuntimeTests.path"/>
    <pathelement location="${local.build.dir}/AndroidRuntimeTests.jar" />
  </path>

  <target name="AndroidRuntimeTests"
          depends="AndroidRuntime"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="AndroidRuntimeTests"
                aij-dir="${components.pkg}/runtime" >
      <!-- Include extra classes from Robolectric that need to be compiled with the sources -->
      <aij-supplemental-includes>
        <include name="org/robolectric/**/*.java" />
      </aij-supplemental-includes>
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       AnnotationProcessors: plugins for processing component annotations
       Note that AnnotationProcessors.jar, produced here, will contain all
       of its dependencies including guava. This makes it much easier to
       specify the -processorpath option in ai.apt.
       ===================================================================== -->
  <target name="AnnotationProcessors"
          description="Create plugins for annotation processing"
          depends="common_CommonUtils,CommonConstants">

    <property name="AnnotationProcessors-class.dir"
              location="${class.dir}/AnnotationProcessors" />
    <mkdir dir="${AnnotationProcessors-class.dir}" />

    <ai.javac destdir="${AnnotationProcessors-class.dir}"
              source="1.7" target="1.7">
      <include name="${components.pkg}/scripts/*.java" />
      <include name="${components.pkg}/annotations/*.java" />
      <include name="${components.pkg}/annotations/androidmanifest/*.java" />
      <classpath>
        <pathelement location="${public.build.dir}/CommonConstants.jar" />
        <pathelement location="${build.dir}/common/CommonUtils.jar" />
        <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </ai.javac>

    <copy todir="${AnnotationProcessors-class.dir}">
      <fileset dir="${src.dir}">
        <include name="${components.pkg}/scripts/templates/*" />
      </fileset>
    </copy>

    <jar basedir="${AnnotationProcessors-class.dir}"
         destfile="${local.build.dir}/AnnotationProcessors.jar" >
      <zipfileset src="${public.build.dir}/CommonConstants.jar"/>
      <zipfileset src="${build.dir}/common/CommonUtils.jar" />
      <zipfileset src="${lib.dir}/guava/guava-14.0.1.jar" />
      <zipfileset src="${lib.dir}/json/json.jar" />
      <fileset dir="${src.dir}">
        <include name="META-INF/**/*"/>
      </fileset>
    </jar>

  </target>

  <!-- ======================================================================
     Internal Inclusion of ZXing 2.1
     ====================================================================== -->

  <!-- =====================================================================
       Define base package path.
       ===================================================================== -->
  <property name="barcode.pkg" value="com/google/zxing/client/android" />

  <target name="Barcode"
          depends=""
          description="Generate ZXing embedded library">
    <property name="Barcode-class.dir" location="${class.dir}/Barcode" />
    <mkdir dir="${Barcode-class.dir}" />

    <ai.javac destdir="${Barcode-class.dir}">
      <include name="${barcode.pkg}/**/*.java" />
      <classpath>
        <pathelement location="${lib.dir}/QRGenerator/core.jar" />
        <pathelement location="${lib.dir}/android/android-28/android.jar" />
      </classpath>
    </ai.javac>

    <jar basedir="${Barcode-class.dir}"
         destfile="${public.deps.dir}/Barcode.jar" />

  </target>


  <!-- =====================================================================
       ExternalComponentGenerator: create required extension files
       ===================================================================== -->
  <target name="ExternalComponentGenerator"
          description="generate extension files"
          depends="AndroidRuntime">
    <mkdir dir="${ExternalComponentGenerator-class.dir}" />
    <mkdir dir="${ExternalComponent.dir}" />
    <mkdir dir="${ExternalComponent-class.dir}" />
    <ai.javac destdir="${ExternalComponentGenerator-class.dir}">
      <include name="${components.pkg}/scripts/ExternalComponentGenerator.java" />
      <classpath>
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </ai.javac>
    <java classname="com.google.appinventor.components.scripts.ExternalComponentGenerator">
      <arg value="${public.build.dir}/simple_components.json" />
      <arg value="${public.build.dir}/simple_components_build_info.json" />
      <arg value="${ExternalComponent.dir}"/>
      <arg value="${AndroidRuntime-class.dir}" />
      <arg value="${public.deps.dir}"/>
      <arg value="${ExternalComponent-class.dir}"/>
      <arg value="${extensions.packagefqcn}"/>
      <classpath>
        <pathelement location="${ExternalComponentGenerator-class.dir}" />
        <pathelement location="${lib.dir}/json/json.jar" />
      </classpath>
    </java>
  </target>

  <!-- =====================================================================
        unjarAllExtensionLibraries : Unjarring extension's library in order for the extensions'dex to work properly.
        ===================================================================== -->
  <target name="unjarAllExtensionLibraries" depends="ExternalComponentGenerator">
    <foreach target="unjarExtensionLibraries" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent-class.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="unjarExtensionLibraries">
    <basename property="extensionClassFolder" file="${extension}" />
    <unzip dest="${ExternalComponent-class.dir}/${extensionClassFolder}">
      <fileset dir="${ExternalComponent-class.dir}/${extensionClassFolder}">
        <include name="**/*.jar" />
      </fileset>
    </unzip>
  </target>

  <!-- =====================================================================
       jarAllExtensions: create ${extension}.jar and AndroidRuntime.jar for each extension.
       ===================================================================== -->
  <target name="jarAllExtensions" depends="unjarAllExtensionLibraries" >
    <foreach target="jarExtension" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent-class.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="jarExtension">
    <basename property="extensionClassFolder" file="${extension}" />
    <jar destfile="${ExternalComponent-class.dir}/${extensionClassFolder}.jar"
         basedir="${ExternalComponent-class.dir}/${extensionClassFolder}"
         includes="**/*.class"
         excludes="*.jar" />
    <antcall target="ProGuard">
      <param name="extensionClassFolder" value="${extensionClassFolder}" />
    </antcall>
    <copy file="${ExternalComponent-class.dir}/${extensionClassFolder}.jar"
          tofile="${ExternalComponent.dir}/${extensionClassFolder}/files/AndroidRuntime.jar"/>
    <echo>Generated build file AndroidRuntime.jar [${extensionClassFolder}]</echo>
  </target>

  <!-- =====================================================================
       dexAllExtensions: create classes.dex for each extension.
       ===================================================================== -->
  <target name="dexAllExtensions" depends="jarAllExtensions">
    <foreach target="dexExtension" param="extension">
      <path>
        <fileset dir="${ExternalComponent-class.dir}" >
          <include name="*.jar"/>
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="dexExtension" depends="">
    <basename property="extensionType" file="${extension}" suffix=".jar"/>
    <java jar="${lib.dir}/android/tools/dx.jar"
          fork="true"
          failonerror="true">
      <arg value="--dex"/>
      <arg value="--no-strict"/>
      <arg value="--output"/>
      <arg value="${ExternalComponent.dir}/${extensionType}/classes.jar"/>
      <arg value="${ExternalComponent-class.dir}/${extensionType}.jar"/>
    </java>
    <echo>Dexing extension: ${extensionType}</echo>
  </target>

  <!-- =====================================================================
      extensions: create ${extension}.aix for each external component.
       ===================================================================== -->
  <target name="packExtension">
    <basename property="extensionType" file="${extension}" />
    <zip destfile="${Extensions.dir}/${extensionType}.aix"
         basedir="${ExternalComponent.dir}"
         includes="${extensionType}/"
    />

  </target>

  <target name="extensions" depends="ExternalComponentGenerator, jarAllExtensions, dexAllExtensions">
    <mkdir dir="${Extensions.dir}" />
    <foreach target="packExtension" param="extension" inheritall="true">
      <path>
        <dirset dir="${ExternalComponent.dir}">
          <include name="*" />
        </dirset>
      </path>
    </foreach>
  </target>
     
  <!-- =====================================================================
      ProGuard: obfuscates and minifies the AndroidRuntime.jar file, containing
                the extensions source code. Only runs if the task has been called
                like "ant extensions -Dproguard=1".
       ===================================================================== -->

  <condition property="skipProguard">
    <not>
      <equals arg1="${proguard}" arg2="1" />
    </not>
  </condition>

  <target name="ProGuard" unless="skipProguard">
    <taskdef resource="proguard/ant/task.properties"
             classpath="${lib.dir}/proguard/proguard.jar" />
    <proguard printmapping="${public.build.dir}/proguard.map"
              overloadaggressively="on"
              configuration="${lib.dir}/proguard/proguard.cfg"
              ignorewarnings="false">

      <injar  file="${ExternalComponent-class.dir}/${extensionClassFolder}.jar" />
      <outjar file="${ExternalComponent-class.dir}/${extensionClassFolder}_p.jar" />

      <!-- FOR DEVELOPER: Add the needed libraries for your extension right here
                          like the ones above, just after copying them to the deps
                          directory.
      <libraryjar file="${public.deps.dir}/my-awesome-library.jar" /> -->
         
      <!-- Core libraries -->
      <libraryjar file="${public.deps.dir}/http-legacy.jar" />
      <libraryjar file="${public.deps.dir}/android.jar" />
      <libraryjar file="${public.deps.dir}/CommonVersion.jar" />
      <!-- Android Support -->
      <libraryjar file="${public.deps.dir}/animated-vector-drawable.jar" />
      <libraryjar file="${public.deps.dir}/appcompat-v7.jar" />
      <libraryjar file="${public.deps.dir}/asynclayoutinflater.jar" />
      <libraryjar file="${public.deps.dir}/collections.jar" />
      <libraryjar file="${public.deps.dir}/common.jar" />
      <libraryjar file="${public.deps.dir}/constraint-layout.jar" />
      <libraryjar file="${public.deps.dir}/constraint-layout-solver.jar" />
      <libraryjar file="${public.deps.dir}/coordinatorlayout.jar" />
      <libraryjar file="${public.deps.dir}/cursoradapter.jar" />
      <libraryjar file="${public.deps.dir}/customview.jar" />
      <libraryjar file="${public.deps.dir}/documentfile.jar" />
      <libraryjar file="${public.deps.dir}/drawerlayout.jar" />
      <libraryjar file="${public.deps.dir}/interpolator.jar" />
      <libraryjar file="${public.deps.dir}/lifecycle-common.jar" />
      <libraryjar file="${public.deps.dir}/livedata.jar" />
      <libraryjar file="${public.deps.dir}/livedata-core.jar" />
      <libraryjar file="${public.deps.dir}/loader.jar" />
      <libraryjar file="${public.deps.dir}/localbroadcastmanager.jar" />
      <libraryjar file="${public.deps.dir}/print.jar" />
      <libraryjar file="${public.deps.dir}/runtime.jar" />
      <libraryjar file="${public.deps.dir}/slidingpanelayout.jar" />
      <libraryjar file="${public.deps.dir}/support-annotations.jar" />
      <libraryjar file="${public.deps.dir}/support-compat.jar" />
      <libraryjar file="${public.deps.dir}/support-core-ui.jar" />
      <libraryjar file="${public.deps.dir}/support-core-utils.jar" />
      <libraryjar file="${public.deps.dir}/support-fragment.jar" />
      <libraryjar file="${public.deps.dir}/support-vector-drawable.jar" />
      <libraryjar file="${public.deps.dir}/swiperefreshlayout.jar" />
      <libraryjar file="${public.deps.dir}/versionedparcelable.jar" />
      <libraryjar file="${public.deps.dir}/viewmodel.jar" />
      <libraryjar file="${public.deps.dir}/viewpager.jar" />
      <!-- Components Libraries -->
      <libraryjar file="${public.deps.dir}/osmdroid.jar" />
      <libraryjar file="${public.deps.dir}/webrtc.jar" />
      <libraryjar file="${public.deps.dir}/jts.jar" />
      <libraryjar file="${public.deps.dir}/androidsvg.jar" />
      <libraryjar file="${public.deps.dir}/kawa.jar" />
      <libraryjar file="${public.deps.dir}/acra-4.4.0.jar" />
      <libraryjar file="${public.deps.dir}/twitter4j.jar" />
      <libraryjar file="${public.deps.dir}/twitter4jmedia.jar" />
      <libraryjar file="${public.deps.dir}/httpmime.jar" />
      <libraryjar file="${public.deps.dir}/fusiontables.jar" />
      <libraryjar file="${public.deps.dir}/firebase.jar" />
      <libraryjar file="${public.deps.dir}/google-api-client-beta.jar" />
      <libraryjar file="${public.deps.dir}/google-http-client-beta.jar" />
      <libraryjar file="${public.deps.dir}/google-api-client-android2-beta.jar" />
      <libraryjar file="${public.deps.dir}/google-http-client-android2-beta.jar" />
      <libraryjar file="${public.deps.dir}/google-http-client-android3-beta.jar" />
      <libraryjar file="${public.deps.dir}/gson-2.1.jar" />
      <libraryjar file="${public.deps.dir}/json.jar" />
      <libraryjar file="${public.deps.dir}/google-oauth-client-beta.jar" />
      <libraryjar file="${public.deps.dir}/jedis.jar" />
      <libraryjar file="${public.deps.dir}/commons-pool.jar" />
      <libraryjar file="${public.deps.dir}/guava-14.0.1.jar" />
      <libraryjar file="${public.deps.dir}/core.jar" />
      <!-- Android Runtime -->
      <libraryjar file="${public.build.dir}/AndroidRuntime.jar" />
         
      <!-- Add library extension -->
             <libraryjar file="${public.deps.dir}/youtube.jar" />
       <libraryjar file="${public.deps.dir}/unity-ads.jar" />
       <libraryjar file="${public.deps.dir}/ytextract.jar" />
       <libraryjar file="${public.deps.dir}/giraffeplayer2.jar" />
       <libraryjar file="${public.deps.dir}/spruce-android.jar" />
       <libraryjar file="${public.deps.dir}/audience-network.jar" />
       <libraryjar file="${public.deps.dir}/autodetectotpandroid.jar" />
       <libraryjar file="${public.deps.dir}/rootbeerlib.jar" />
       <libraryjar file="${public.deps.dir}/tooltip.jar" />
       <libraryjar file="${public.deps.dir}/youtubejextractor.jar" />
       <libraryjar file="${public.deps.dir}/RoundCornerProgressBar.jar" />
       <libraryjar file="${public.deps.dir}/google-direction.jar" />
       <libraryjar file="${public.deps.dir}/keyboardview.jar" />
       <libraryjar file="${public.deps.dir}/equalizers.jar" />
       <libraryjar file="${public.deps.dir}/playercontrolview.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer-core.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer-dash.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer-hls.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer-smoothstreaming.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer-ui.jar" />
       <libraryjar file="${public.deps.dir}/exoplayer.jar" />
       <libraryjar file="${public.deps.dir}/startapp.jar" />
       <libraryjar file="${public.deps.dir}/HomeLockerLib.jar" />
       <libraryjar file="${public.deps.dir}/selectedtextview.jar" />
       <libraryjar file="${public.deps.dir}/audioplayerview.jar" />
       <libraryjar file="${public.deps.dir}/joystick.jar" />
      <!--libraryjar file="${public.build.dir}/kangris/*.jar" /-->

      <dontnote filter="proguard.configuration.ConfigurationLogger" />
      <adaptresourcefilecontents filter="proguard/ant/task.properties" />
    </proguard>

    <delete file="${ExternalComponent-class.dir}/${extensionClassFolder}.jar" />
    <move file="${ExternalComponent-class.dir}/${extensionClassFolder}_p.jar"
          tofile="${ExternalComponent-class.dir}/${extensionClassFolder}.jar" />
  </target>

</project>
